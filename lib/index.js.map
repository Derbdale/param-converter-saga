{"version":3,"file":"index.js","sources":["../src/saga/slice.ts","../src/saga/saga.ts","../src/index.tsx"],"sourcesContent":["import { PayloadAction, createSelector, createSlice } from '@reduxjs/toolkit';\r\nimport { RoutingState, ParamConverterPayload, RootState, ParamConversionPayload, ParamPayload } from '../types';\r\n\r\nexport const initialState: RoutingState = {\r\n  isLoading: true,\r\n  params: {}\r\n};\r\n\r\nconst routingSlice = createSlice({\r\n  name: 'routing',\r\n  initialState,\r\n  reducers: {\r\n    convertParams(state, action: PayloadAction<ParamConversionPayload>) {\r\n      state.isLoading = true;\r\n    },\r\n    setParam(state, action: PayloadAction<ParamPayload>) {\r\n      state.isLoading = false;\r\n      state.params = {\r\n        ...state.params,\r\n        [action.payload.param]: action.payload.value,\r\n      };\r\n    },\r\n    setHasLoaded(state, action: PayloadAction<boolean>) {\r\n      state.isLoading = !action.payload;\r\n    },\r\n    addParamConverter(state, action: PayloadAction<ParamConverterPayload>) {},\r\n  },\r\n});\r\n\r\nexport const selectIsLoading = createSelector(\r\n  [(state: RootState) => state.routing || initialState],\r\n  routing => routing.isLoading,\r\n);\r\n\r\nexport const selectParams = createSelector(\r\n  [(state: RootState) => state.routing || initialState],\r\n  routing => routing.params,\r\n);\r\n\r\nexport const { actions, reducer, name: sliceKey } = routingSlice;\r\nexport const { convertParams } = actions;\r\n","import { PayloadAction } from '@reduxjs/toolkit';\r\nimport { takeLatest, put, call, takeEvery, all } from 'redux-saga/effects';\r\nimport { ParamConversionPayload, ParamConverterPayload } from '../types';\r\nimport { actions } from './slice';\r\n\r\nconst paramConverters = {};\r\n\r\nfunction* convertParams(action: PayloadAction<ParamConversionPayload>) {\r\n  for (const [param, value] of Object.entries(action.payload.params)) {\r\n    const converter = action.payload.overrides && action.payload.overrides[param] ? action.payload.overrides[param] : param;\r\n    if (paramConverters[converter]) {\r\n      yield call(paramConverters[converter], [param, value]);\r\n    } else {\r\n      yield put(\r\n        actions.setParam({\r\n          param,\r\n          value,\r\n        }),\r\n      );\r\n    }\r\n  }\r\n  yield put(actions.setHasLoaded(true));\r\n}\r\n\r\nfunction* addParamConverter(action: PayloadAction<ParamConverterPayload>) {\r\n  paramConverters[action.payload.param] = action.payload.fn;\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    takeLatest(actions.convertParams.type, convertParams),\r\n    takeEvery(actions.addParamConverter.type, addParamConverter)\r\n  ]);\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Route, RouteComponentProps, useParams } from 'react-router';\r\n\r\nimport {\r\n  actions as routingActions,\r\n  selectIsLoading,\r\n} from './saga/slice';\r\n\r\nimport {\r\n  useInjectReducer,\r\n  useInjectSaga,\r\n} from 'redux-injectors';\r\nimport { reducer, sliceKey } from './saga/slice';\r\nimport RoutingSaga from './saga/saga';\r\nimport { ParamConversionOverrides } from './types';\r\n\r\nconst ParamConverter = ({ component: Component, overrides, loader, ...props }) => {\r\n  useInjectReducer({ key: sliceKey, reducer: reducer });\r\n  useInjectSaga({ key: sliceKey, saga: RoutingSaga });\r\n\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(selectIsLoading);\r\n  const params = useParams();\r\n\r\n  const updateParams = () => {\r\n    dispatch(\r\n      routingActions.convertParams({\r\n        params,\r\n        overrides,\r\n      }),\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      routingActions.convertParams({\r\n        params,\r\n        overrides\r\n      }),\r\n    );\r\n  }, []);\r\n\r\n  return (isLoading ? loader : (\r\n    <Component updateParams={updateParams} {...props} />\r\n  ));\r\n};\r\n\r\nexport const renderWithParamConverter = (BaseComponent: React.Component|React.FunctionComponent, overrides: ParamConversionOverrides | undefined = undefined, loader: React.Component | React.FunctionComponent | null = null) => {\r\n  return routeProps => (\r\n    <ParamConverter\r\n      {...routeProps}\r\n      overrides={overrides}\r\n      component={BaseComponent}\r\n      loader={loader}\r\n    />\r\n  );\r\n};\r\n\r\n\r\nexport * as slice from './saga/slice';\r\nexport { default as saga } from './saga/saga';\r\nexport * as types from './types';"],"names":["createSlice","createSelector","convertParams","call","put","all","takeLatest","takeEvery","useInjectReducer","useInjectSaga","RoutingSaga","useDispatch","useSelector","useParams","routingActions","useEffect","React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGO,IAAM,YAAY,GAAiB;IACxC,SAAS,EAAE,IAAI;IACf,MAAM,EAAE,EAAE;CACX,CAAC;AAEF,IAAM,YAAY,GAAGA,mBAAW,CAAC;IAC/B,IAAI,EAAE,SAAS;IACf,YAAY,cAAA;IACZ,QAAQ,EAAE;QACR,aAAa,EAAb,UAAc,KAAK,EAAE,MAA6C;YAChE,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;SACxB;QACD,QAAQ,EAAR,UAAS,KAAK,EAAE,MAAmC;;YACjD,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;YACxB,KAAK,CAAC,MAAM,yBACP,KAAK,CAAC,MAAM,gBACd,MAAM,CAAC,OAAO,CAAC,KAAK,IAAG,MAAM,CAAC,OAAO,CAAC,KAAK,MAC7C,CAAC;SACH;QACD,YAAY,EAAZ,UAAa,KAAK,EAAE,MAA8B;YAChD,KAAK,CAAC,SAAS,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC;SACnC;QACD,iBAAiB,EAAjB,UAAkB,KAAK,EAAE,MAA4C,KAAI;KAC1E;CACF,CAAC,CAAC;AAEI,IAAM,eAAe,GAAGC,sBAAc,CAC3C,CAAC,UAAC,KAAgB,IAAK,OAAA,KAAK,CAAC,OAAO,IAAI,YAAY,GAAA,CAAC,EACrD,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,SAAS,GAAA,CAC7B,CAAC;AAEK,IAAM,YAAY,GAAGA,sBAAc,CACxC,CAAC,UAAC,KAAgB,IAAK,OAAA,KAAK,CAAC,OAAO,IAAI,YAAY,GAAA,CAAC,EACrD,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,GAAA,CAC1B,CAAC;AAEa,IAAA,OAAO,GAA8B,YAAY,QAA1C,EAAE,OAAO,GAAqB,YAAY,QAAjC,EAAQ,QAAQ,GAAK,YAAY,KAAjB,CAAkB;AAClD,IAAAC,eAAa,GAAK,OAAO,cAAZ;;;;;;;;;;;;;ACnC5B,IAAM,eAAe,GAAG,EAAE,CAAC;AAE3B,SAAU,aAAa,CAAC,MAA6C;;;;;sBACD,EAArC,KAAA,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;;;sBAArC,cAAqC,CAAA;gBAAvD,WAAc,EAAb,KAAK,QAAA,EAAE,KAAK,QAAA;gBAChB,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;qBACpH,eAAe,CAAC,SAAS,CAAC,EAA1B,wBAA0B;gBAC5B,qBAAMC,YAAI,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,EAAA;;gBAAtD,SAAsD,CAAC;;oBAEvD,qBAAMC,WAAG,CACP,OAAO,CAAC,QAAQ,CAAC;oBACf,KAAK,OAAA;oBACL,KAAK,OAAA;iBACN,CAAC,CACH,EAAA;;gBALD,SAKC,CAAC;;;gBAVuB,IAAqC,CAAA;;oBAalE,qBAAMA,WAAG,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAA;;gBAArC,SAAqC,CAAC;;;;CACvC;AAED,SAAU,iBAAiB,CAAC,MAA4C;;QACtE,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;;;CAC3D;SAEwB,QAAQ;;;oBAC/B,qBAAMC,WAAG,CAAC;oBACRC,kBAAU,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC;oBACrDC,iBAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE,iBAAiB,CAAC;iBAC7D,CAAC,EAAA;;gBAHF,SAGE,CAAC;;;;;;;;;;ACfL,IAAM,cAAc,GAAG,UAAC,EAAqD;IAAnD,IAAW,SAAS,eAAA,EAAE,SAAS,eAAA,EAAE,MAAM,YAAA,EAAK,KAAK,cAAnD,oCAAqD,CAAF;IACzEC,+BAAgB,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;IACtDC,4BAAa,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAEC,QAAW,EAAE,CAAC,CAAC;IAEpD,IAAM,QAAQ,GAAGC,sBAAW,EAAE,CAAC;IAC/B,IAAM,SAAS,GAAGC,sBAAW,CAAC,eAAe,CAAC,CAAC;IAC/C,IAAM,MAAM,GAAGC,qBAAS,EAAE,CAAC;IAE3B,IAAM,YAAY,GAAG;QACnB,QAAQ,CACNC,OAAc,CAAC,aAAa,CAAC;YAC3B,MAAM,QAAA;YACN,SAAS,WAAA;SACV,CAAC,CACH,CAAC;KACH,CAAC;IAEFC,eAAS,CAAC;QACR,QAAQ,CACND,OAAc,CAAC,aAAa,CAAC;YAC3B,MAAM,QAAA;YACN,SAAS,WAAA;SACV,CAAC,CACH,CAAC;KACH,EAAE,EAAE,CAAC,CAAC;IAEP,QAAQ,SAAS,GAAG,MAAM,IACxBE,wCAAC,SAAS,aAAC,YAAY,EAAE,YAAY,IAAM,KAAK,EAAI,CACrD,EAAE;AACL,CAAC,CAAC;IAEW,wBAAwB,GAAG,UAAC,aAAsD,EAAE,SAA2D,EAAE,MAA+D;IAA5H,0BAAA,EAAA,qBAA2D;IAAE,uBAAA,EAAA,aAA+D;IAC3N,OAAO,UAAA,UAAU,IAAI,QACnBA,wCAAC,cAAc,eACT,UAAU,IACd,SAAS,EAAE,SAAS,EACpB,SAAS,EAAE,aAAa,EACxB,MAAM,EAAE,MAAM,IACd,IACH,CAAC;AACJ;;;;;;;"}